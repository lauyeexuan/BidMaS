// Add tab-specific loading states
const myProjectsLoading = ref(false)
const allProjectsLoading = ref(false) 
const bidsLoading = ref(false)

// New function to load data based on active tab
const loadTabData = async (tab) => {
  try {
    const schoolId = userStore.currentUser.school
    
    // Ensure we have basic settings (majors, etc.) regardless of tab
    await fetchBasicSettings()
    
    // Load specific data based on active tab
    if (tab === 'myProjects') {
      myProjectsLoading.value = true
      await fetchUserProjects(schoolId, userStore.currentUser.uid, selectedAcademicYear.value)
      myProjectsLoading.value = false
    } else if (tab === 'allProjects') {
      allProjectsLoading.value = true
      await fetchAllProjects()
      allProjectsLoading.value = false
    } else if (tab === 'bids') {
      bidsLoading.value = true
      await fetchProjectBids()
      await setupAllBidsListeners()
      bidsLoading.value = false
    }
  } catch (error) {
    console.error('Error loading tab data:', error)
    showToast('Failed to load data for this tab', 'error')
    
    // Make sure to reset loading states on error
    myProjectsLoading.value = false
    allProjectsLoading.value = false
    bidsLoading.value = false
  }
}

// New function to fetch only basic settings without all project data
const fetchBasicSettings = async () => {
  try {
    loading.value = true
    const schoolId = userStore.currentUser.school
    
    // Get all available majors
    const projectsRef = doc(db, 'schools', schoolId, 'projects', selectedAcademicYear.value)
    const projectsDoc = await getDoc(projectsRef)
    
    if (projectsDoc.exists() && projectsDoc.data().majors && projectsDoc.data().majors.length > 0) {
      availableMajors.value = projectsDoc.data().majors
      
      if (userStore.currentUser.role === 'lecturer' && userStore.currentUser.major) {
        selectedMajor.value = userStore.currentUser.major
      } else {
        selectedMajor.value = projectsDoc.data().majors[0]
      }
    }
    
    if (!selectedMajor.value) {
      loading.value = false
      return
    }
    
    // Get project settings for the selected major
    const majorRef = collection(db, 'schools', schoolId, 'projects', selectedAcademicYear.value, selectedMajor.value)
    const majorDocs = await getDocs(majorRef)
    
    if (!majorDocs.empty) {
      const majorDoc = majorDocs.docs[0]
      const majorData = majorDoc.data()
      
      projectSettings.value = {
        headers: majorData.headers || {},
        milestones: majorData.milestones || []
      }
      
      if (majorData.headers) {
        Object.keys(majorData.headers).forEach(headerName => {
          newProject.value[headerName] = ''
        })
      }
    }
  } catch (error) {
    console.error('Error fetching basic settings:', error)
    showToast('Failed to load settings', 'error')
  } finally {
    loading.value = false
  }
}

// Modify fetchSettings to not load all data
const fetchSettings = async () => {
  try {
    loading.value = true
    await fetchBasicSettings()
    // We no longer call these functions here:
    // - fetchUserProjects()
    // - fetchAllProjects()
    // - fetchProjectBids()
  } catch (error) {
    console.error('Error fetching settings:', error)
    showToast('Failed to load settings', 'error')
  } finally {
    loading.value = false
  }
} 